// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;

import 'menu_item.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 6495208931863241297),
      name: 'MenuItem',
      lastPropertyId: const obx_int.IdUid(19, 464657611418317167),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1592315049153886471),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 7462863096231829060),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 430846733913072454),
            name: 'sellPrice',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 9054707446956831066),
            name: 'sellPriceType',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 4940802606677222972),
            name: 'category',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 6472782546457181004),
            name: 'mrp',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 8689185363243923189),
            name: 'purchasePrice',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 8623032276107503854),
            name: 'acSellPrice',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 2715734306326076426),
            name: 'nonAcSellPrice',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 4647292626289481923),
            name: 'onlineDeliveryPrice',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 95649212323648283),
            name: 'onlineSellPrice',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 5577845808045424797),
            name: 'hsnCode',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 752307232293544907),
            name: 'itemCode',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 412019300122538851),
            name: 'barCode',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 1025033072091328451),
            name: 'barCode2',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(16, 5303554380655641513),
            name: 'imagePath',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(17, 2921465599143506605),
            name: 'available',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(18, 7985335669452630594),
            name: 'adjustStock',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(19, 464657611418317167),
            name: 'gstRate',
            type: 8,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 5271690494685821644),
      name: 'Note',
      lastPropertyId: const obx_int.IdUid(3, 8055258805406742770),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2908962392022102502),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1281433544322923667),
            name: 'title',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 8055258805406742770),
            name: 'content',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
obx.Store openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) {
  return obx.Store(getObjectBoxModel(),
      directory: directory,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(2, 5271690494685821644),
      lastIndexId: const obx_int.IdUid(0, 0),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    MenuItem: obx_int.EntityDefinition<MenuItem>(
        model: _entities[0],
        toOneRelations: (MenuItem object) => [],
        toManyRelations: (MenuItem object) => {},
        getId: (MenuItem object) => object.id,
        setId: (MenuItem object, int id) {
          object.id = id;
        },
        objectToFB: (MenuItem object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final sellPriceOffset = fbb.writeString(object.sellPrice);
          final sellPriceTypeOffset = fbb.writeString(object.sellPriceType);
          final categoryOffset = fbb.writeString(object.category);
          final mrpOffset =
              object.mrp == null ? null : fbb.writeString(object.mrp!);
          final purchasePriceOffset = object.purchasePrice == null
              ? null
              : fbb.writeString(object.purchasePrice!);
          final acSellPriceOffset = object.acSellPrice == null
              ? null
              : fbb.writeString(object.acSellPrice!);
          final nonAcSellPriceOffset = object.nonAcSellPrice == null
              ? null
              : fbb.writeString(object.nonAcSellPrice!);
          final onlineDeliveryPriceOffset = object.onlineDeliveryPrice == null
              ? null
              : fbb.writeString(object.onlineDeliveryPrice!);
          final onlineSellPriceOffset = object.onlineSellPrice == null
              ? null
              : fbb.writeString(object.onlineSellPrice!);
          final hsnCodeOffset =
              object.hsnCode == null ? null : fbb.writeString(object.hsnCode!);
          final itemCodeOffset = object.itemCode == null
              ? null
              : fbb.writeString(object.itemCode!);
          final barCodeOffset =
              object.barCode == null ? null : fbb.writeString(object.barCode!);
          final barCode2Offset = object.barCode2 == null
              ? null
              : fbb.writeString(object.barCode2!);
          final imagePathOffset = object.imagePath == null
              ? null
              : fbb.writeString(object.imagePath!);
          fbb.startTable(20);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, sellPriceOffset);
          fbb.addOffset(3, sellPriceTypeOffset);
          fbb.addOffset(4, categoryOffset);
          fbb.addOffset(5, mrpOffset);
          fbb.addOffset(6, purchasePriceOffset);
          fbb.addOffset(7, acSellPriceOffset);
          fbb.addOffset(8, nonAcSellPriceOffset);
          fbb.addOffset(9, onlineDeliveryPriceOffset);
          fbb.addOffset(10, onlineSellPriceOffset);
          fbb.addOffset(11, hsnCodeOffset);
          fbb.addOffset(12, itemCodeOffset);
          fbb.addOffset(13, barCodeOffset);
          fbb.addOffset(14, barCode2Offset);
          fbb.addOffset(15, imagePathOffset);
          fbb.addInt64(16, object.available);
          fbb.addInt64(17, object.adjustStock);
          fbb.addFloat64(18, object.gstRate);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final sellPriceParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final sellPriceTypeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, '');
          final categoryParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final mrpParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final purchasePriceParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16);
          final acSellPriceParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 18);
          final nonAcSellPriceParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 20);
          final onlineDeliveryPriceParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 22);
          final onlineSellPriceParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 24);
          final hsnCodeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 26);
          final itemCodeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 28);
          final barCodeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 30);
          final barCode2Param = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 32);
          final imagePathParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 34);
          final availableParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 36, 0);
          final adjustStockParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 38, 0);
          final gstRateParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 40, 0);
          final object = MenuItem(
              id: idParam,
              name: nameParam,
              sellPrice: sellPriceParam,
              sellPriceType: sellPriceTypeParam,
              category: categoryParam ?? '',
              mrp: mrpParam,
              purchasePrice: purchasePriceParam,
              acSellPrice: acSellPriceParam,
              nonAcSellPrice: nonAcSellPriceParam,
              onlineDeliveryPrice: onlineDeliveryPriceParam,
              onlineSellPrice: onlineSellPriceParam,
              hsnCode: hsnCodeParam,
              itemCode: itemCodeParam,
              barCode: barCodeParam,
              barCode2: barCode2Param,
              imagePath: imagePathParam,
              available: availableParam,
              adjustStock: adjustStockParam,
              gstRate: gstRateParam);

          return object;
        }),
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [MenuItem] entity fields to define ObjectBox queries.
class MenuItem_ {
  /// See [MenuItem.id].
  static final id =
      obx.QueryIntegerProperty<MenuItem>(_entities[0].properties[0]);

  /// See [MenuItem.name].
  static final name =
      obx.QueryStringProperty<MenuItem>(_entities[0].properties[1]);

  /// See [MenuItem.sellPrice].
  static final sellPrice =
      obx.QueryStringProperty<MenuItem>(_entities[0].properties[2]);

  /// See [MenuItem.sellPriceType].
  static final sellPriceType =
      obx.QueryStringProperty<MenuItem>(_entities[0].properties[3]);

  /// See [MenuItem.category].
  static final category =
      obx.QueryStringProperty<MenuItem>(_entities[0].properties[4]);

  /// See [MenuItem.mrp].
  static final mrp =
      obx.QueryStringProperty<MenuItem>(_entities[0].properties[5]);

  /// See [MenuItem.purchasePrice].
  static final purchasePrice =
      obx.QueryStringProperty<MenuItem>(_entities[0].properties[6]);

  /// See [MenuItem.acSellPrice].
  static final acSellPrice =
      obx.QueryStringProperty<MenuItem>(_entities[0].properties[7]);

  /// See [MenuItem.nonAcSellPrice].
  static final nonAcSellPrice =
      obx.QueryStringProperty<MenuItem>(_entities[0].properties[8]);

  /// See [MenuItem.onlineDeliveryPrice].
  static final onlineDeliveryPrice =
      obx.QueryStringProperty<MenuItem>(_entities[0].properties[9]);

  /// See [MenuItem.onlineSellPrice].
  static final onlineSellPrice =
      obx.QueryStringProperty<MenuItem>(_entities[0].properties[10]);

  /// See [MenuItem.hsnCode].
  static final hsnCode =
      obx.QueryStringProperty<MenuItem>(_entities[0].properties[11]);

  /// See [MenuItem.itemCode].
  static final itemCode =
      obx.QueryStringProperty<MenuItem>(_entities[0].properties[12]);

  /// See [MenuItem.barCode].
  static final barCode =
      obx.QueryStringProperty<MenuItem>(_entities[0].properties[13]);

  /// See [MenuItem.barCode2].
  static final barCode2 =
      obx.QueryStringProperty<MenuItem>(_entities[0].properties[14]);

  /// See [MenuItem.imagePath].
  static final imagePath =
      obx.QueryStringProperty<MenuItem>(_entities[0].properties[15]);

  /// See [MenuItem.available].
  static final available =
      obx.QueryIntegerProperty<MenuItem>(_entities[0].properties[16]);

  /// See [MenuItem.adjustStock].
  static final adjustStock =
      obx.QueryIntegerProperty<MenuItem>(_entities[0].properties[17]);

  /// See [MenuItem.gstRate].
  static final gstRate =
      obx.QueryDoubleProperty<MenuItem>(_entities[0].properties[18]);
}


